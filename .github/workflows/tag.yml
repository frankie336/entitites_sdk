name: Test, Tag, and Publish

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  id-token: write

jobs:
  test-and-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üì¶ Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: üß™ Install dependencies and SDK
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --extra-index-url https://test.pypi.org/simple/ -e .
          if [ -f requirements.txt ]; then
            pip install --extra-index-url https://test.pypi.org/simple/ -r requirements.txt
          else
            echo "requirements.txt not found, skipping."
          fi

      - name: ‚úÖ Run tests
        run: pytest tests/

      - name: üöÄ Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üîß Install semantic-release and plugins
        run: |
          npm install -g semantic-release \
            @semantic-release/git \
            @semantic-release/changelog \
            @semantic-release/github \
            conventional-changelog-conventionalcommits

      - name: üî¢ Run semantic-release (tag, changelog, GitHub release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release

      - name: üèóÔ∏è Build Python package
        run: |
          python -m build

      - name: üõ°Ô∏è Check build output
        run: |
          if [ -z "$(ls -A dist 2>/dev/null)" ]; then
            echo "‚ùå Build failed: dist/ is empty."
            exit 1
          else
            echo "‚úÖ Build artifacts found:"
            ls -l dist
          fi

      - name: üì¶ Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --repository-url https://test.pypi.org/legacy/ \
            --skip-existing \
            dist/*
