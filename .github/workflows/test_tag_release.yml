# Use the actual filename here, e.g., .github/workflows/publish.yml
# This filename is needed for the Trusted Publisher setup on Test PyPI.
name: Test, Tag, and Publish

on:
  push:
    branches:
      - main
      - master

# Permissions required for Trusted Publishing (id-token)
# and for semantic-release to push tags/releases (contents).
permissions:
  contents: write
  id-token: write # <-- Required for OIDC Trusted Publishing

jobs:
  # Consider renaming this job for clarity, e.g., 'test_and_publish'
  test-and-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Note: Building and publishing happens 3 times here.
        # Consider separating testing (matrix) from a single publish job.
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags for semantic-release
          fetch-depth: 0

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # Include requirements.txt in the cache key if it exists
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: 🔧 Install base dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel

      # Combine installation for efficiency
      - name: 🧪 Install dependencies, SDK, and test requirements
        run: |
          pip install --extra-index-url https://test.pypi.org/simple/ -e ".[dev]"
          if [ -f requirements.txt ]; then
            pip install --extra-index-url https://test.pypi.org/simple/ -r requirements.txt
          else
            echo "requirements.txt not found, skipping."
          fi

      - name: ✅ Run tests
        run: pytest tests/

      # --- Semantic Release ---
      - name: 🚀 Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🔧 Install semantic-release and plugins
        run: |
          npm install -g semantic-release \
            @semantic-release/git \
            @semantic-release/changelog \
            @semantic-release/github \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: 🔢 Run semantic-release (tag, changelog, patch pyproject, GitHub release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Configure npm token if needed for private plugins
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      # --- Build ---
      - name: 🛠️ Install build module
        run: pip install build

      - name: 🏗️ Build Python package
        run: python -m build

      - name: 🛡️ Check build output
        run: |
          if [ -z "$(ls -A dist 2>/dev/null)" ]; then
            echo "❌ Build failed: dist/ is empty."
            exit 1
          else
            echo "✅ Build artifacts found:"
            ls -l dist
          fi

      # --- Publish using Trusted Publishing ---
      - name: 📦 Publish package to Test PyPI via Trusted Publisher
        # Only publish if the current ref is a tag (created by semantic-release)
        # Adjust the condition if semantic-release pushes tags differently or if you want to publish on every main/master push
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # No username/password/token needed! The action handles OIDC.
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true # Skips if this version already exists
          # Use default dist/* path