# .github/workflows/ci.yml

name: Lint, Test, Build, and Publish Docker Images

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: write # Needed for semantic-release to push tags/releases/changelog
  packages: write # Needed IF pushing Docker images to GHCR (kept for flexibility, but not used for DockerHub push)
  # id-token: write # Only needed for OIDC auth (e.g., PyPI trusted publishing)

jobs:
  lint:
    name: 🧹 Lint Code & Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Choose a consistent version for linting

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # Use hashFiles on specific dependency files for better cache invalidation
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-

      - name: 🔧 Install Linting Tools
        run: |
          python -m pip install --upgrade pip
          # Install your specific linters - using Ruff as an example
          pip install ruff black
          # Install Hadolint (Dockerfile linter)
          # Consider installing Hadolint via other methods like apt or pre-built binaries if wget fails
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          sudo chmod +x /usr/local/bin/hadolint

      - name: ✨ Run Ruff Linter
        # Check only on PRs, Check & Fix on pushes to main/master
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Running Ruff check for PR..."
            ruff check . --output-format=github
          else
            echo "Running Ruff check --fix for push to main/master..."
            # CORRECTED: Removed the invalid --exit-zero-on-fix flag.
            # Ruff check --fix exits 0 if no errors remain after fixing.
            ruff check . --fix --output-format=github
          fi

      - name: ⚫️ Run Black Formatter Check
        run: black --check .

      - name: 🐳 Lint Dockerfiles
        run: |
          # Add error checking for hadolint command if desired (e.g., || exit 1)
          hadolint docker/api/Dockerfile
          hadolint docker/sandbox/Dockerfile
          # Add other Dockerfiles if needed: hadolint path/to/other/Dockerfile

  test:
    name: ✅ Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint # Run after linting
    strategy:
      fail-fast: false
      matrix:
        # Test against relevant Python versions used in your Docker images
        python-version: ["3.11", "3.12"] # Adjust as needed

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # Include python version in the key
          key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-test-

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Adapt based on your dependency management:
          # Option 1: If using requirements.txt for *all* test deps
          pip install -r requirements.txt # Ensure pytest, pytest-cov are here
          # Option 2: If using pyproject.toml extras ([dev])
          # pip install ".[dev]" # Install root project deps + dev deps
          # pip install "./src/api/sandbox[dev]" # Install sandbox project deps + dev deps
          # pip install pytest pytest-cov # Explicitly add if not in both dev extras

      - name: ✅ Run Pytest with Coverage
        # CORRECTED: Point to root 'tests/' directory based on your tree output
        run: pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      # Optional: Upload coverage report
      - name: ⬆️ Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4 # Use specific version
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Add CODECOV_TOKEN secret if using Codecov
          fail_ci_if_error: false # Optional: Prevents CI failure if Codecov upload fails
        # Consider adding condition: if: secrets.CODECOV_TOKEN != ''

  build_and_publish:
    name: 🚀 Build, Tag, and Publish Images to Docker Hub
    runs-on: ubuntu-latest
    needs: test # Run only if all test jobs succeed
    # Only run on pushes to main/master, not on PRs to avoid premature releases
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags for semantic-release
          fetch-depth: 0
          # Persist credentials for semantic-release to push (needed for @semantic-release/git)
          persist-credentials: true # Ensure this is true

      - name: ⚙️ Setup QEMU (for multi-platform builds, optional)
        uses: docker/setup-qemu-action@v3

      - name: ⚙️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub using the provided username and the PAT stored in secrets
      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: thanosprime # Your Docker Hub username
          password: ${{ secrets.DOCKERHUB_THANOSPRIME }} # The secret holding your PAT

      # Setup Node.js for semantic-release
      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use an LTS version

      # Install semantic-release and configured plugins
      - name: 🔧 Install semantic-release and plugins
        run: |
          npm install -g semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github
            # Ensure all plugins listed in .releaserc.json are here

      # Run semantic-release to determine version, update files, create tag, release notes, etc.
      # This step relies on .releaserc.json being present and configured correctly
      - name: 🚀 Run semantic-release
        id: semantic # Give the step an ID to potentially reference outputs (though not used here)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for @semantic-release/github and @semantic-release/git
          # DOCKER_USERNAME: thanosprime # Example if needed by a custom plugin
          # DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_THANOSPRIME }} # Example if needed
        run: npx semantic-release

      # Semantic-release handles tagging. We extract the tag it created for Docker metadata.
      - name: 🏷️ Extract Git Tag Version created by semantic-release
        id: get_version
        # This step only runs IF semantic-release succeeded and created a tag
        # It assumes semantic-release created a tag reachable from the current commit
        if: success() # Check if previous step succeeded
        run: |
          # Fetch tags pushed by semantic-release (might be needed in some runner environments)
          git fetch --tags origin
          # Describe the current commit using the most recent tag reachable
          # Use --tags to consider all tags, not just annotated ones
          # Use --exact-match to ensure we get the tag on the *current* commit
          VERSION=$(git describe --tags --exact-match HEAD 2>/dev/null)

          if [ -z "$VERSION" ]; then
            echo "::warning::No exact tag found on HEAD after semantic-release. Trying most recent tag."
            # Fallback: Get the most recent tag reachable from this commit
            VERSION=$(git describe --tags --abbrev=0 HEAD 2>/dev/null)
          fi

          if [ -z "$VERSION" ]; then
            # This case should ideally not happen if semantic-release ran successfully and found a release to make.
            echo "::error::Could not determine version tag after semantic-release. Check semantic-release logs."
            # Optionally, set a default or fail the job
            # VERSION="0.0.0-error" # Example default
            exit 1
          fi

          # Remove 'v' prefix if present (semantic-release tags might have it)
          VERSION=${VERSION#v}
          echo "Detected version from tag: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Define metadata (image names, tags) for Docker images using the extracted version
      - name: 🔧 Define Image Metadata
        id: meta
        if: steps.get_version.outputs.VERSION # Only run if version was extracted
        uses: docker/metadata-action@v5
        with:
          # List of Docker Hub images (using your username)
          images: |
            thanosprime/entities-api-api
            thanosprime/entities-api-sandbox
          tags: |
            # tag with the specific semantic version (e.g., 1.2.3)
            type=semver,pattern={{version}},value=${{ steps.get_version.outputs.VERSION }}
            # tag with 'latest' ONLY on the main/master branch push
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            # Optional: Add git sha tag for traceability
            type=sha,prefix=sha-

      # Build and push the API image
      # Use the tags generated by the metadata action
      - name: 🏗️ Build and Push API Image
        if: steps.meta.outputs.tags != '' # Only run if metadata tags were generated
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }} # Apply generated tags to the FIRST image in the list above
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64 # Add linux/arm64 if needed and QEMU is setup
          # Enable Docker layer caching using GitHub Actions cache
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # NO target: needed here. Tags apply correctly.

      # Build and push the Sandbox image
      # Use the SAME tags generated by the metadata action
      - name: 🏗️ Build and Push Sandbox Image
        if: steps.meta.outputs.tags != '' # Only run if metadata tags were generated
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/sandbox/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }} # Apply generated tags to the SECOND image in the list above
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64 # Add linux/arm64 if needed and QEMU is setup
          # Enable Docker layer caching using GitHub Actions cache
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # NO target: needed here. Tags apply correctly.