name: Lint, Test, Tag, and Publish

on:
  push:
    branches:
      - '**'  # Run on all branches

permissions:
  contents: write   # Needed for semantic-release to push tags/releases
  id-token: write   # Needed for PyPI trusted publishing

env:
  TEST_PYPI_URL: https://test.pypi.org/simple/
  PROD_PYPI_URL: https://upload.pypi.org/legacy/
  BASE_URL: http://localhost:9000/  # Your base URL if needed by tests/lint

jobs:
  lint:
    name: 🧹 Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Use a single consistent version for linting

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-lint-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-lint-pip-

      - name: 🔧 Install lint dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --extra-index-url ${{ env.TEST_PYPI_URL }} -e ".[dev]"

      - name: ⚫ Run Black (Format Check)
        run: black --check .

      - name: ⚫ Run isort (Import Sort Check)
        run: isort --check .

  test:
    name: ✅ Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: lint  # Run tests only if linting passes
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --extra-index-url ${{ env.TEST_PYPI_URL }} -e ".[dev]"

      - name: ✅ Run tests
        run: pytest tests/

  release:
    name: 🚀 Tag, Build, and Publish
    runs-on: ubuntu-latest
    needs: test  # Run release steps only if tests pass (which depends on lint passing)
    if: "github.ref_type == 'branch' && (github.ref_name == 'main' || github.ref_name == 'master' || github.ref_name == 'dev')"
    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for semantic-release to analyze commits

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Use a consistent version for build/release

      - name: 🔧 Install build and dev tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          pip install --extra-index-url ${{ env.TEST_PYPI_URL }} -e ".[dev]"

      - name: 🚀 Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🔧 Install semantic-release
        run: |
          npm install -g semantic-release \
            @semantic-release/git \
            @semantic-release/changelog \
            @semantic-release/github \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: 🔢 Run semantic-release (tag, changelog, version bump)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: 🏗️ Build Python package
        run: python -m build

      - name: 🛡️ Verify build artifacts
        run: |
          ls -lh dist
          test -n "$(ls -A dist 2>/dev/null)" || (echo "❌ dist/ directory is empty! Build might have failed or semantic-release determined no release was needed." ; exit 1)

      - name: 🧠 Decide publish target
        id: repo
        run: |
          BRANCH="${{ github.ref_name }}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "Publishing to Production PyPI"
            echo "repo=${{ env.PROD_PYPI_URL }}" >> $GITHUB_OUTPUT
            echo "pypi_token_name=PYPI_API_TOKEN" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "dev" ]]; then
            echo "Publishing pre-release to TestPyPI"
            echo "repo=${{ env.TEST_PYPI_URL }}" >> $GITHUB_OUTPUT
            echo "pypi_token_name=TEST_PYPI_API_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "::error::Cannot determine publish target for branch $BRANCH"
            exit 1
          fi

      - name: 📦 Publish to PyPI or Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.repo.outputs.repo != ''
        with:
          trust-store: true
          skip-existing: true
